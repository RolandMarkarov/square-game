{"version":3,"sources":["components/form/Form.jsx","components/statistics/Statistics.jsx","components/section/section.jsx","components/dashboard/Dashboard.jsx","components/app/App.jsx","serviceWorker.js","index.js"],"names":["Form","handleDificulty","handleUsername","username","startGame","handleStartGame","className","name","defaultValue","onChange","value","disabled","type","placeholder","onClick","urlWinners","Statistics","start","gameOver","useState","leader","setLeaders","useEffect","a","async","axios","res","data","resp","post","winner","date","Date","sendData","map","key","id","Section","activeField","time","action","dificulty","cleanField","color","setColor","intime","setIntime","attempt","setAttempt","clicked","setClicked","timeout","setTimeout","clearTimeout","result","delay","fieldClass","Dashboard","fields","dataFetch","maxClick","endGame","setTime","setActiveField","setGameOver","click","setClick","setMessage","newField","length","shift","handleInTime","field","total","rows","i","push","gameBoard","App","setUserame","gameDif","setGameDif","setMaxClick","setDataFetch","randomFields","setFields","setStart","Math","pow","floor","fetchData","x","sort","random","splice","e","val","target","preventDefault","handleStop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63be8072.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./form.scss\"\r\n\r\nconst Form = ({handleDificulty, handleUsername, username, startGame, handleStartGame}) => {\r\n    return (\r\n        <div className=\"form-wrapper\">\r\n            <select name=\"\" defaultValue={'DEFAULT'} onChange={handleDificulty}>\r\n                <option value=\"DEFAULT\" disabled>Select Dificulty</option>\r\n                <option value=\"easyMode\" disabled={startGame}>Easy mode</option>\r\n                <option value=\"normalMode\" disabled={startGame}>Normal mode</option>\r\n                <option value=\"hardMode\" disabled={startGame}>Hard mode</option>\r\n            </select>\r\n            {\r\n                !startGame ?\r\n                    <input type=\"text\"\r\n                           value={username}\r\n                           name=\"name\"\r\n                           onChange={handleUsername}\r\n                           placeholder={\"Enter your name\"}/> :\r\n                    <p>{username}</p>\r\n            }\r\n            <button  onClick={handleStartGame}>{startGame? \"Stop\" : \"Start\"}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form","import React, {useEffect, useState} from 'react'\r\nimport \"./statistics.scss\"\r\nimport axios from \"axios\"\r\n\r\nconst urlWinners = \"https://starnavi-frontend-test-task.herokuapp.com/winners\";\r\n\r\nconst Statistics = ({start, username, gameOver}) => {\r\n    const [leader, setLeaders] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const resp = async () => {\r\n            const res = await axios(urlWinners)\r\n            setLeaders(res.data)\r\n        }\r\n        resp()\r\n    }, [start]);\r\n\r\n\r\n    useEffect(()=>{\r\n        const sendData = async () => {\r\n            const res = await axios.post(urlWinners, {\r\n                winner: username,\r\n                date: new Date()\r\n            });\r\n            setLeaders(res.data)\r\n\r\n        };\r\n        sendData()\r\n    },[gameOver])\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h2>Leader Board</h2>\r\n\r\n            <ul className=\"list\">\r\n                {leader.map(leader => (\r\n                    <li className=\"list-item\" key={leader.id}><span>{leader.winner}</span><span>{leader.date}</span></li>))}\r\n            </ul>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Statistics","import React, {useEffect, useState} from 'react';\r\nimport \"./section.scss\"\r\n\r\nconst Section = ({id, activeField, time, action, dificulty, cleanField}) => {\r\n    const [color, setColor] = useState(\"\");\r\n    const [intime, setIntime] =useState(false);\r\n    const [attempt, setAttempt] = useState(false);\r\n    const [clicked, setClicked] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        if (cleanField) {\r\n            setColor(\"\");\r\n            setClicked(false);\r\n            setIntime(false);\r\n            setAttempt(false);\r\n        }\r\n    }, [cleanField])\r\n\r\n    useEffect(()=>{\r\n        if(activeField === id){\r\n            setColor(\"blue\")\r\n            setIntime(true)\r\n            setAttempt(true);\r\n        }\r\n    },[activeField]);\r\n\r\n    useEffect(()=>{\r\n        if(attempt && !intime && !clicked){\r\n            setColor('red')\r\n        }\r\n        const timeout = setTimeout(()=>{\r\n            if (intime){\r\n                setIntime(false)\r\n            }\r\n        }, time)\r\n        return ()=> clearTimeout(timeout);\r\n    },[intime]);\r\n\r\n    function handleClick() {\r\n        if (intime & (activeField === id)) {\r\n            setClicked(true);\r\n            action();\r\n        }\r\n    }\r\n\r\n    function fieldClass() {\r\n        let result = \"\";\r\n        if (time === dificulty.delay) {\r\n            result = \"medium\";\r\n        }\r\n        if (time === dificulty.delay) {\r\n            result = \"small\";\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    return (\r\n        <div onClick={handleClick}\r\n             className={`section ${clicked ? \"green\" : color} ${fieldClass()}`}\r\n             >\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Section;","import \"./dashboard.scss\"\r\nimport Section from \"../section/section\";\r\n//\r\n// class Dashboard extends Component {\r\n//     state = {\r\n//         dashboard: [],\r\n//         serverData: null\r\n//     }\r\n//\r\n//     dashboarCreator = () => {\r\n//         let serverData = this.props.serverFetch\r\n//         this.setState({\r\n//             serverData: serverData\r\n//         })\r\n//\r\n//     }\r\n//     someFn = ()=>{\r\n//         if (this.state.serverData){\r\n//             const {field, delay} = this.state.serverData\r\n//             let x =null;\r\n//             if(field){\r\n//                 return x = Math.pow(field)\r\n//             }\r\n//             console.log(x)\r\n//         }\r\n//         }\r\n//\r\n//\r\n//     componentDidMount() {\r\n//     }\r\n//     componentDidUpdate(prevProps, prevState, snapshot) {\r\n//         // this.dashboarCreator()\r\n//\r\n//         this.someFn()\r\n//     }\r\n//\r\n//     dashboardRender = () => {\r\n//         if (this.props) {\r\n//             let field = this.props.serverFetch;\r\n//             let newProps = this.props.serverFetch;\r\n//             let x = newProps.field.field\r\n//\r\n//             let fieldQuantity = x * x;\r\n//             console.log(newProps.field.field)\r\n//             let result = [];\r\n//             let spanStyles = {\r\n//                 border: \"1px solid grey\"\r\n//             };\r\n//\r\n//             if (x === 5) {\r\n//                 spanStyles.width = \"20%\";\r\n//                 spanStyles.height = \"20%\";\r\n//             }\r\n//\r\n//             if (x === 10) {\r\n//                 spanStyles.width = \"10%\";\r\n//                 spanStyles.height = \"10%\";\r\n//             }\r\n//\r\n//             if (x === 15) {\r\n//                 spanStyles.width = \"6.6%\";\r\n//                 spanStyles.height = \"6.6%\";\r\n//             }\r\n//\r\n//\r\n//             for (let i = 0; i < fieldQuantity; i++) {\r\n//                 let obj = {\r\n//                     isActive: false,\r\n//                     isChecked: false,\r\n//                     id: i\r\n//                 };\r\n//                 result.push(obj)\r\n//             }\r\n//             result.map(el => <span className={\"small\"} style={spanStyles} key={el.id}></span>)\r\n//             console.log(result)\r\n//             // this.setState({\r\n//             //     dashboard: result\r\n//             // })\r\n//         }\r\n//\r\n//     };\r\n//\r\n//\r\n//     render() {\r\n//\r\n//         const {startGame} = this.props;\r\n//         const {dashboard} = this.state\r\n//         return (\r\n//             <div className=\"dashboard-wrapper\">\r\n//                 <h2>Message Here</h2>\r\n//                 <div className=\"dashboard\">\r\n//\r\n//                     <Section/>\r\n//                 </div>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n//\r\n// export default Dashboard\r\nimport React, {useEffect, useState} from 'react';\r\nimport Statistics from \"../statistics/Statistics\";\r\n\r\nconst Dashboard = ({dificulty, fields, dataFetch, start, maxClick, endGame, username}) => {\r\n\r\n    const [time, setTime] = useState(null);\r\n    const [activeField, setActiveField] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [click, setClick] = useState(0);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [cleanField, setCleanField] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n    });\r\n\r\n    useEffect(() => {\r\n        setTime(setTimeout(() => {\r\n            if (start) {\r\n                const newField = fields;\r\n                const id = fields.length - 1\r\n                newField.shift();\r\n                setActiveField(newField[0]);\r\n                if (!newField.length) {\r\n                    setGameOver(true)\r\n                }\r\n            }\r\n        }, dataFetch.delay))\r\n        return () => clearTimeout(time);\r\n    }, [start, activeField, dificulty]);\r\n\r\n    useEffect(() => {\r\n        if (gameOver && click >= maxClick) {\r\n            setMessage(\"You Win\");\r\n            endGame()\r\n        } else if (gameOver && click < maxClick) {\r\n            setMessage(`You missed ${maxClick - click}  blocks`);\r\n            endGame()\r\n        }\r\n    }, [gameOver]);\r\n\r\n    const handleInTime = () => {\r\n        setClick(click => click + 1)\r\n    };\r\n\r\n    const gameBoard = (field, time) => {\r\n        if (start){\r\n            let total = [], rows = [];\r\n            for (let i = 0; i <= field * field; i++) {\r\n                if (i % field === 0) {\r\n                    total.push(<tr key={i}>{rows}</tr>);\r\n                    rows = []\r\n                }\r\n                rows.push(<td>\r\n                    <Section\r\n                        key={i}\r\n                        id={i}\r\n                        activeField={activeField}\r\n                        time={time}\r\n                        action={handleInTime}\r\n                        dificulty={dificulty}\r\n                        cleanField={cleanField}\r\n                    /></td>)\r\n\r\n            }\r\n            return total\r\n        }\r\n\r\n    };\r\n\r\n    return (\r\n        <div className={\"dashboard\"}>\r\n            <div>\r\n                <table>\r\n                    <tbody>\r\n                    {gameBoard(dataFetch.field, dataFetch.delay)}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n          <div>\r\n              <Statistics start={start} username={username} gameOver={gameOver}/>\r\n          </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","// import React, {Component} from 'react'\n\nimport axios from \"axios\"\nimport Form from '../form/Form';\nimport Statistics from '../statistics/Statistics';\nimport Dashboard from '../dashboard/Dashboard';\n\nimport React, {useState, useEffect} from 'react';\nimport './App.scss';\n\nconst url = \"https://starnavi-frontend-test-task.herokuapp.com/game-settings\";\n\n\nconst App = () => {\n    const [username, setUserame] = useState('');\n    const [gameDif, setGameDif] = useState(\"easyMode\");\n    const [maxClick, setMaxClick] = useState(13);\n    const [dataFetch, setDataFetch] = useState({field: 5, delay: 2000});\n    const [fields, setFields] = useState({fields: randomFields()})\n    const [start, setStart] = useState(false);\n\n\n    useEffect(() => {\n        const fields = Math.pow(dataFetch.field, 2);\n        setMaxClick(Math.floor(fields / 2 + 1));\n        setFields(randomFields())\n    }, [gameDif, dataFetch]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const res = await axios(url);\n            setDataFetch(res.data[gameDif])\n        };\n        fetchData()\n    }, [gameDif]);\n\n    const handleStartGame = (e) => {\n        e.preventDefault();\n        setStart(!start)\n      if (start){\n        handleStop()\n      }\n    };\n\n    function randomFields() {\n        const x = Math.pow(dataFetch.field, 2)\n        let result = [];\n        for (let i = 0; i < x; i++) {\n            result.push(i)\n        }\n        result.sort(() => Math.random() - 0.5).splice(x / 2 + 2, 1000)\n        return result\n    }\n\n    function handleStop(e) {\n        if (e) {\n            e.preventDefault();\n        }\n        setFields({fields: randomFields()})\n        setStart(false);\n    }\n\n    const handleDificulty = (e) => {\n        const val = e.target.value;\n        setGameDif(val)\n    };\n    const handleUsername = (e) => {\n        const val = e.target.value;\n        setUserame(val)\n    };\n\n    function handleEndGame() {\n        setStart(false);\n    }\n\n\n    return (\n        <div className={\"App\"}>\n            <Form\n                handleDificulty={handleDificulty}\n                handleUsername={handleUsername}\n                username={username}\n                handleStartGame={handleStartGame}\n                startGame={start}\n\n            />\n            <Dashboard\n                dificulty={gameDif}\n                fields={fields}\n                start={start}\n                maxClick={maxClick}\n                dataFetch={dataFetch}\n                endGame={handleEndGame}\n                username={username}\n            />\n\n        </div>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}